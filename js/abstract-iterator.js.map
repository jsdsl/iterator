{"version":3,"sources":["../ts/abstract-iterator.ts"],"names":["AbstractIterator","[object Object]","callback","element","this","Error","Symbol","iterator","done","hasNext","value","next","exports"],"mappings":"oEAeA,MAAsBA,iBA4BdC,QAAQC,GAEd,IAAK,IAAIC,KAAWC,KAAMF,EAASC,GAY7BF,SAEN,MAAM,IAAII,MAAM,2FAWVJ,QAEN,MAAM,IAAII,MAAM,0FAUVJ,CAACK,OAAOC,YAEd,OAAO,IAAI,MAIVN,YAAmBM,GAElBH,KAAKG,SAAWA,EAIVN,CAACK,OAAOC,YAEd,OAAOH,KAIDH,OAEN,MAAO,CAENO,MAAOJ,KAAKG,SAASE,UACrBC,MAAON,KAAKG,SAASI,UAMtBP,MAUIH,sBAEN,OAAOG,KAAKE,OAAOC,aA5GrBK,QAAAZ,iBAAAA","file":"abstract-iterator.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t7:43 PM -- October 06th, 2019.\n *\tProject: JSDSL - Iterator\n */\n\nimport { Iterator as JSDSLIterator } from \"./iterator\";\n\n/**\n * An abstract implementation of the JSDSL {@link Iterator} interface.\n * \n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport abstract class AbstractIterator<E> implements JSDSLIterator<E> {\n\t\n\t/**\n\t * Returns true if a call to {@link #next} would return a valid and meaningful result after calling this method.\n\t * \n\t * A 'valid and meaningful result' entails that the result is an actual element of the underlying structure that\n\t * this AbstractIterator is iterating over. This is to help distinguish from undefined values that were actually\n\t * present in the underlying structure versus the undefined value that is returned from #next when all other valid\n\t * results are exhausted.\n\t *\n\t * @return true if a call to {@link #next} would return a valid and meaningful result.\n\t */\n\tpublic abstract hasNext(): boolean;\n\t\n\t/**\n\t * Returns the next element this AbstractIterator has to iterate over, over undefined if there are no more valid\n\t * elements to return.\n\t *\n\t * @return The next element this AbstractIterator has to iterate over, over undefined if there are no more valid\n\t * elements to return.\n\t */\n\tpublic abstract next(): E | undefined;\n\t\n\t/**\n\t * Performs the specified action for all of the remaining elements in this AbstractIterator.\n\t *\n\t * @param callback The action to perform on the remaining elements of this AbstractIterator.\n\t */\n\tpublic forEach(callback: (element: E) => void): void {\n\t\t\n\t\tfor (let element of this) callback(element);\n\t\t\n\t}\n\t\n\t/**\n\t * Removes and returns the last element returned by the #next() method from the underlying data structure.\n\t * \n\t * Note if this method is not overridden in implementing child classes, the `#remove` method will throw an error,\n\t * with a warning that the method is not supported for the current implementation.\n\t *\n\t * @return The last element returned by the #next() method.\n\t */\n\tpublic remove(): E | undefined {\n\t\t\n\t\tthrow new Error(\"ERR | #remove() operation is not supported for this implementation of AbstractIterator.\");\n\t\t\n\t}\n\t\n\t/**\n\t * Resets this AbstractIterator back to it's initial position, readying it to iterate over the underlying collection\n\t * from the 'beginning' again.\n\t * \n\t * Note if this method is not overridden in implementing child classes, the `#reset` method will throw an error,\n\t * with a warning that the method is not supported for the current implementation.\n\t */\n\tpublic reset(): void {\n\t\t\n\t\tthrow new Error(\"ERR | #reset() operation is not supported for this implementation of AbstractIterator.\");\n\t\t\n\t}\n\t\n\t/**\n\t * Returns an instance of an IterableIterator that allows 'this' to be iterable using the baked-in 'for...of'\n\t * syntax, rather than more verbose iteration (i.e. using a 'while' loop).\n\t *\n\t * @return An instance of an IterableIterator.\n\t */\n\tpublic [Symbol.iterator](): IterableIterator<E> {\n\t\t\n\t\treturn new class implements IterableIterator<E> {\n\t\t\t\n\t\t\tprivate iterator: AbstractIterator<E>;\n\t\t\t\n\t\t\tpublic constructor(iterator: AbstractIterator<E>) {\n\t\t\t\t\n\t\t\t\tthis.iterator = iterator;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic [Symbol.iterator](): IterableIterator<E> {\n\t\t\t\t\n\t\t\t\treturn this;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): IteratorResult<E> {\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\t\n\t\t\t\t\tdone: !this.iterator.hasNext(),\n\t\t\t\t\tvalue: this.iterator.next() as E\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}(this);\n\t\t\n\t}\n\t\n\t/**\n\t * This method is simply an ease-of-understanding alias method for the [Symbol.iterator] method.\n\t *\n\t * @return An instance of an IterableIterator.\n\t * @see AbstractIterator#[Symbol.iterator]\n\t */\n\tpublic getIterableIterator(): IterableIterator<E> {\n\t\t\n\t\treturn this[Symbol.iterator]();\n\t\t\n\t}\n\t\n}"]}