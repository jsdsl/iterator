{"version":3,"sources":["../ts/abstract-iterable.ts"],"names":["AbstractIterable","[object Object]","Symbol","iterator","this","getIterableIterator","exports"],"mappings":"oEAgBA,MAAsBA,iBAedC,CAACC,OAAOC,YAEd,OAAOC,KAAKD,WAAWE,uBAjBzBC,QAAAN,iBAAAA","file":"abstract-iterable.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t7:45 PM -- October 06th, 2019.\n *\tProject: JSDSL - Iterator\n */\n\nimport { Iterator as JSDSLIterator } from \"./iterator\";\nimport { Iterable as JSDSLIterable } from \"./iterable\";\n\n/**\n * An abstract implementation of the JSDSL {@link Iterable} interface.\n * \n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport abstract class AbstractIterable<E> implements JSDSLIterable<E> {\n\t\n\t/**\n\t * Returns an iterator over the element contents of this AbstractIterable.\n\t *\n\t * @return An iterator over the element contents of this AbstractIterable.\n\t */\n\tpublic abstract iterator(): JSDSLIterator<E>;\n\t\n\t/**\n\t * Returns an instance of an IterableIterator that allows 'this' to be iterable using the baked-in 'for...of'\n\t * syntax, rather than more verbose iteration (i.e. using a 'while' loop).\n\t *\n\t * @return An instance of an IterableIterator.\n\t */\n\tpublic [Symbol.iterator](): IterableIterator<E> {\n\t\t\n\t\treturn this.iterator().getIterableIterator();\n\t\t\n\t}\n\t\n}"]}